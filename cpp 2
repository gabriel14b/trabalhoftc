#include <__msvc_all_public_headers.hpp>
#define col 5
#define _s 30

using namespace std;

int init[20], fin[20], a = 0, b = 0;
string init_dfa[_s], fin_dfa[_s];
int _a = 0, _b = 0;

void initialise(int nfa_table[][col]) {
    for (int i = 0; i < 1000; i++) {
        for (int j = 0; j < col; j++) {
            nfa_table[i][j] = -1;
        }
    }
}


void reduce_fin(int x) {
    for (int i = x; i < b - 1; i++)
        fin[i] = fin[i + 1];
    b -= 1;
}

/*
 A função proc serve para simplificar a função e, como não temos um simbolo para concatenação, esta função providencia um para a equação.
*/

string preproc(string s) {
    char x[5000];
    int l = s.length();
    int j = 0;
    x[j] = '(';
    j += 1;
    for (int i = 0; i < l; i++) {
        x[j] = s[i];
        j += 1;
        if (s[i] >= 97 && s[i] <= 122 && s[i + 1] >= 97 && s[i + 1] <= 122) {
            x[j] = '.';
            j += 1;
        }
        else if (s[i] == ')' && s[i + 1] == '(') {
            x[j] = '.';
            j += 1;
        }
        else if (s[i] >= 97 && s[i] <= 122 && s[i + 1] == '(') {
            x[j] = '.';
            j += 1;
        }
        else if (s[i] == ')' && s[i + 1] >= 97 && s[i + 1] <= 122) {
            x[j] = '.';
            j += 1;
        }
        else if (s[i] == '*' && (s[i + 1] == '(' || (s[i + 1] >= 97 && s[i + 1] < 122))) {
            x[j] = '.';
            j += 1;
        }
    }
    x[j] = ')';
    j += 1;
    string p;
    for (int i = 0; i < j; i++)
        p += x[i];
    return p;
}

/*
    converte a regex em uma notação postfix.
*/

string postfix(string s) {
    int l = s.length();
    char a[5000];
    stack <char> ch;
    int j = 0;
    for (int i = 0; i < l; i++) {
        char x = s[i];
        switch (x) {
        case 'a':   a[j] = 'a';
            j += 1;
            break;
        case 'b':   a[j] = 'b';
            j += 1;
            break;
        case '(':   ch.push('(');
            break;
        case ')':   while (!ch.empty()) {
            if (ch.top() == '(') {
                ch.pop();
                break;
            }
            else {
                a[j] = ch.top();
                ch.pop();
                j += 1;
            }
        }
                break;
        case '.':   if (ch.empty()) {
            ch.push('.');
        }
                else {
            char temp = ch.top();
            if (temp == '(')
                ch.push('.');
            else if (temp == '*') {
                a[j] = ch.top();
                ch.pop();
                j += 1;
                if (ch.top() == '.') {
                    a[j] = '.';
                    j += 1;
                }
                else {
                    ch.push('.');
                }
            }
            else if (temp == '.') {
                a[j] = ch.top();
                ch.pop();
                j += 1;
                ch.push('.');
            }
            else if (temp == '|') {
                ch.push('.');
            }
        }
                break;
        case '|':   if (ch.empty()) {
            ch.push('|');
        }
                else {
            char temp = ch.top();
            if (temp == '(')
                ch.push('|');
            else if (temp == '*') {
                a[j] = ch.top();
                ch.pop();
                j += 1;
                ch.push('|');
            }
            else if (temp == '.') {
                a[j] = ch.top();
                j += 1;
                ch.pop();
                ch.push('|');
            }
        }
                break;
        case '*':   if (ch.empty()) {
            ch.push('*');
        }
                else {
            char temp = ch.top();
            if (temp == '(' || temp == '.' || temp == '|')
                ch.push('*');
            else {
                a[j] = ch.top();
                ch.pop();
                j += 1;
                ch.push('*');
            }
        }
                break;
        }
    }
    string p;
    for (int i = 0; i < j; i++) {
        p += a[i];
    }
    return p;
}

/*
    Esta função converte a função postfix da expreção regular
    em um Autômato Finito Deterministico (AFD) compatível.
*/

int reg_afn(string s, int nfa_table[][col]) {
    int l = s.length();
    int states = 1;
    int m, n, j, counter;
    for (int i = 0; i < l; i++) {
        char x = s[i];
        switch (x) {
        case 'a': nfa_table[states][0] = states;
            init[a] = states;
            a += 1;
            states += 1;
            nfa_table[states - 1][1] = states;
            fin[b] = states;
            b += 1;
            nfa_table[states][0] = states;
            states += 1;
            break;
        case 'b': nfa_table[states][0] = states;
            init[a] = states;
            a += 1;
            states += 1;
            nfa_table[states - 1][2] = states;
            fin[b] = states;
            b += 1;
            nfa_table[states][0] = states;
            states += 1;
            break;
        case '.': m = fin[b - 2];
            n = init[a - 1];
            nfa_table[m][3] = n;
            reduce_fin(b - 2);  //reduz o estado final
            a -= 1;           //reduz os estados iniciais
            break;
        case '|': for (j = a - 1, counter = 0; counter < 2; counter++) {
            m = init[j - counter];
            nfa_table[states][3 + counter] = m;
        }
                a = a - 2;
                init[a] = states;
                a += 1;
                nfa_table[states][0] = states;
                states += 1;
                for (j = b - 1, counter = 0; counter < 2; counter++) {
                    m = fin[j - counter];
                    nfa_table[m][3] = states;
                }
                b = b - 2;
                fin[b] = states;
                b += 1;
                nfa_table[states][0] = states;
                states += 1;
                break;
        case '*': m = init[a - 1];
            nfa_table[states][3] = m;
            nfa_table[states][0] = states;
            init[a - 1] = states;

            states += 1;
            n = fin[b - 1];
            nfa_table[n][3] = m;
            nfa_table[n][4] = states;
            nfa_table[states - 1][4] = states;
            fin[b - 1] = states;
            nfa_table[states][0] = states;
            states += 1;
            break;
        }
    }
    return states;
}


void print_tabela_afd(string afd_tab[][3], int est) {

    int j = 0, sent = 1;
    char ch, atual;
    bool ver = true, end = false;

    std::vector<char>* estados = new std::vector<char>();
    std::vector<char>* from = new std::vector<char>();
    std::vector<char>* to = new std::vector<char>();
    std::vector<char>* with = new std::vector<char>();
    std::vector<char>* ini = new std::vector<char>();
    std::vector<char>* fin = new std::vector<char>();

    ofstream myfile;
    myfile.open("AFD.txt");
    myfile << "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><!--Created with JFLAP 6.4.--><structure>&#13;\n";
    myfile << "\t<type>fa</type>&#13;\n";
    myfile << "\t<automaton>&#13;\n";
    myfile << "\t\t<!--The list of states.-->&#13;\n";

    cout << endl << endl;
    for (int i = 0; i < 60; i++)
        cout << "*";
    cout << endl << endl;
    cout << setw(43) << "TABELA DE ESTADOS DO AFD" << endl << endl;
    cout << setw(10) << "Estados" << setw(10) << "a" << setw(10) << "b" << endl;
    for (int i = 0; i < 60; i++)
        cout << "-";
    cout << endl;
    for (int i = 0; i < est; i++) {
        for (int j = 0; j < 3; j++) {
            if (j == 0)
            {
                estados->push_back(afd_tab[i][j][1]);
            }
            else if (j == 1 && afd_tab[i][j][0] == 'q')
            {
                from->push_back(afd_tab[i][j - 1][1]);
                to->push_back(afd_tab[i][j][1]);
                with->push_back('a');
            }
            else if (j == 2 && afd_tab[i][j][0] == 'q')
            {
                from->push_back(afd_tab[i][j - 2][1]);
                to->push_back(afd_tab[i][j][1]);
                with->push_back('b');
            }
            cout << setw(10) << afd_tab[i][j];
        }
        cout << endl;
    }
    cout << endl;
    for (int i = 0; i < 60; i++)
        cout << "*";
    cout << endl;


    cout << "estado/s inicial/is: ";
    for (int i = 0; i < _a; i++)
    {
        ini->push_back(init_dfa[i][1]);
        cout << init_dfa[i][1];
    }
    cout << endl;
    cout << "estado/s final/is: ";
    for (int i = 0; i < _b; i++)
    {
        fin->push_back(fin_dfa[i][1]);
        cout << fin_dfa[i][1];
    }
    cout << endl << endl;
    for (int i = 0; i < 60; i++)
        cout << "-";
    cout << endl << endl;


    for (int i = 0; i < estados->size(); i++) //criando estados no arquivo JFLAP.
    {
        myfile << "\t\t<state id=\"" << estados->at(i) << "\" name=\"q" << estados->at(i) << "\">&#13;\n";
        myfile << "\t\t\t<x>0.0</x>&#13;\n";
        myfile << "\t\t\t<y>0.0</y>&#13;\n";
        for (int j = 0; j < ini->size(); j++)
        {
            if (ini->at(j) == estados->at(i))
                myfile << "\t\t\t<initial/>&#13;\n";
        }
        for (int j = 0; j < fin->size(); j++)
        {
            if (fin->at(j) == estados->at(i))
                myfile << "\t\t\t<final/>&#13;\n";
        }
        myfile << "\t\t</state>&#13;\n";
    }

    myfile << "\t\t<!--The list of transitions.-->&#13;\n";

    for (int i = 0; i < from->size(); i++) //criando transições no arquivo JFLAP.
    {
        myfile << "\t\t<transition>&#13;";
        myfile << "\n\t\t\t<from>" << from->at(i) << "</from>&#13;";
        myfile << "\n\t\t\t<to>" << to->at(i) << "</to>&#13;";
        myfile << "\n\t\t\t<read>" << with->at(i) << "</read>&#13;";
        myfile << "\n\t\t</transition>&#13;\n";
    }

    myfile << "\t</automaton>&#13;\n";
    myfile << "</structure>\n";

    myfile.close();

    atual = ini->at(0);

    cout << "\n\n\n";
    fstream sen("sentencas.txt", fstream::in); //leitura das sentenças para comparação com o automato
    while (sen >> noskipws >> ch)
    {
        cout << ch;
        if (ch == '\n')
        {
            for (j = 0; j < fin->size(); j++)
            {
                if (fin->at(j) == atual)
                {
                    end = true;
                }
            }
        }
        if (ver == true && ch != '\n')
        {
            for (j = 0; j < with->size(); j++)
            {
                ver = false;
                if (from->at(j) == atual && with->at(j) == ch)
                {
                    atual = to->at(j);
                    ver = true;
                    break;
                }
            } 
        }
        else if (ver == true && ch == '\n' && end == true)
        {
            cout << "Sentenca numero " << sent << " pertence a linguagem!\n\n";
            sent++;
            atual = ini->at(0);
            end = false;
        }
        else if ((ver == false && ch == '\n') || (ch == '\n' && end != true))
        {
            cout << "Sentenca numero " << sent << " nao pertence a linguagem!\n\n";
            sent++;
            atual = ini->at(0);
            ver = true;
        }
    }
    for (j = 0; j < fin->size(); j++)
    {
        if (fin->at(j) == atual)
        {
            end = true;
        }
    }
    if (ver == true && end == true)
    {
        cout << "\nSentenca numero " << sent << " pertence a linguagem!\n\n";
    }
    else
    {
        cout << "\nSentenca numero " << sent << " nao pertence a linguagem!\n\n";
    }
}


vector <int> fecho(int nfa_table[][col], int x) {
    stack <int> s;
    map <int, int> m;
    vector <int> v;
    int y;

    s.push(x);
    m[x] = 1;

    while (!s.empty()) {
        y = s.top();
        s.pop();
        if (nfa_table[y][3] == -1)
            continue;
        else {
            s.push(nfa_table[y][3]);
            m[nfa_table[y][3]] = 1;

            if (nfa_table[y][4] == -1)
                continue;
            else {
                s.push(nfa_table[y][4]);
                m[nfa_table[y][4]] == -1;
            }
        }
    }

    map <int, int> ::iterator itr;
    itr = m.begin();

    while (itr != m.end()) {
        v.push_back(itr->first);
        itr++;
    }
    return v;
}

long long int map_it(vector <int> v, int y) {
    long long int x = 0, m = 1;
    while (y--) {
        m *= 10;
    }

    vector<int> ::iterator it = v.begin();
    while (it != v.end()) {
        x += *it * m;
        m /= 10;
        it += 1;
    }
    return x / 10;
}

/*
    A função state_name() está renomenado todos os novos estados do AFD.
*/
string state_name(int i) {
    char s = 'q';
    string p;
    p += s;
    if (i == 0) {
        p += '0';
        return p;
    }
    int a[100];
    int j = 0;
    while (i > 0) {
        int x = i % 10;
        a[j] = x;
        j += 1;
        i = i / 10;
    }
    for (int i = j - 1; i >= 0; i--) {
        int x = a[i];
        switch (x) {
        case 0: p += '0';
            break;
        case 1: p += '1';
            break;
        case 2: p += '2';
            break;
        case 3: p += '3';
            break;
        case 4: p += '4';
            break;
        case 5: p += '5';
            break;
        case 6: p += '6';
            break;
        case 7: p += '7';
            break;
        case 8: p += '8';
            break;
        case 9: p += '9';
            break;

        }
    }
    return p;
}

void check_init(vector <int> v, string s) {
    for (int i = 0; i < v.size(); i++) {
        if (v[i] == init[0]) {
            init_dfa[_a] = s;
            _a += 1;
        }
    }
}

void check_fin(vector <int> v, string s) {
    for (int i = 0; i < v.size(); i++) {
        if (v[i] == fin[0]) {
            fin_dfa[_b] = s;
            _b += 1;
        }
    }
}

bool check_valid(string palavra) {
    int len = palavra.length();
    int i = 0;
    for (i = 0; i < len; i++) {
        if (palavra[i] == 'a' || palavra[i] == 'b')
            continue;
        else
            return false;

    }

    if (i == len)
        return true;
}

int afn_afd(int tabela_afd[][col], int ests, string tab_afd[][3]) {
    bool flag[100];
    memset(flag, true, sizeof(flag)); //para garantir que todos os estados de fecho foram encontrados

    int est = 0, j = 0;
    map <vector<int>, string> map_est;
    vector <int> v, v1, v2, v3, v4;

    v = fecho(tabela_afd, init[0]);
    flag[init[a]] = false;

    map_est[v] = state_name(j++);
    check_init(v, map_est[v]);  //para verificar se o estado atual é inicial ou não
    check_fin(v, map_est[v]);

    stack < vector<int> > st;
    st.push(v);
    // transição do fecho para o simbolo de input a
    int counter = 0;
    while (true) {

        while (!st.empty()) {
            vector <int> v;
            v = st.top();
            st.pop();
            counter += 1;
            tab_afd[est][0] = map_est[v];       //encontra a transição de um estado 'a' e 'b'

            for (int i = 0; i < v.size(); i++) {
                flag[v[i]] = false;
                int temp = tabela_afd[v[i]][1];      //com input a
                int temp1 = tabela_afd[v[i]][2];     //com input b
                if (temp >= 0)
                    v1.push_back(temp);
                if (temp1 >= 0)
                    v3.push_back(temp1);
            }

            map <int, int> map_temp, map_temp1;  //removendo estado duplicados
            map <int, int> ::iterator it;

            for (int i = 0; i < v1.size(); i++) {
                v2 = fecho(tabela_afd, v1[i]);
                for (int j = 0; j < v2.size(); j++) {
                    map_temp[v2[j]] = 1;
                }
                v2.clear();
            }

            for (int i = 0; i < v3.size(); i++) {
                v4 = fecho(tabela_afd, v3[i]);
                for (int j = 0; j < v4.size(); j++) {
                    map_temp1[v4[j]] = 1;
                }
                v4.clear();
            }


            for (it = map_temp.begin(); it != map_temp.end(); it++) {
                v2.push_back(it->first);
                flag[it->first] = false;
            }

            for (it = map_temp1.begin(); it != map_temp1.end(); it++) {
                v4.push_back(it->first);
                flag[it->first] = false;
            }

            if (v2.empty()) {
                tab_afd[est][1] = "--";
            }
            else {
                string t = map_est[v2];
                char flag1 = t[0];
                if (flag1 == 'q') {
                    tab_afd[est][1] = map_est[v2];   //checando se v2 já foi mapeado ou não
                }
                else {
                    tab_afd[est][1] = state_name(j++);
                    map_est[v2] = tab_afd[est][1];
                    check_init(v2, map_est[v2]);
                    check_fin(v2, map_est[v2]);
                    st.push(v2);                //estado não mapeados serão colocados de volta na pilha
                }
            }

            if (v4.empty()) {
                tab_afd[est][2] = "--";
            }
            else {
                string t = map_est[v4];
                char flag1 = t[0];
                if (flag1 == 'q') {
                    tab_afd[est][2] = map_est[v4];
                }
                else {
                    tab_afd[est][2] = state_name(j++);
                    map_est[v4] = tab_afd[est][2];
                    check_init(v4, map_est[v4]);
                    check_fin(v4, map_est[v4]);
                    st.push(v4);
                }
            }
            v1.clear();
            v2.clear();
            v3.clear();
            v4.clear();
            est += 1;
        }

        int k = 1;
        for (k = 1; k < ests; k++) {
            if (flag[k]) {
                v = fecho(tabela_afd, k);
                map_est[v] = state_name(j++);
                check_init(v, map_est[v]);
                check_fin(v, map_est[v]);
                cout << endl << map_est[v] << " representa : ";
                for (int i = 0; i < v.size(); i++)
                    cout << v[i] << " ";
                cout << endl;
                st.push(v);
                break;
            }
        }

        if (k == ests)
            break;

    }

    print_tabela_afd(tab_afd, est);     //função para imprimir a tabela de AFD

    return est;


}


int main() {
   
    int afd_table[1000][col];
    initialise(afd_table);
    int ests = 0, ver = 0;
    char ch = ' ';
    string s;

    fstream fin("Read.jff", fstream::in);

    while (fin >> noskipws >> ch) {

        if (ver == 3 && ch == '<')
            ver = 4;

        if (ver == 0 && ch == 'o')
            ver++;
        else if (ver == 1 && ch == 'n')
            ver++;
        else if (ver == 2 && ch == '>')
            ver++;
        else if (ver == 3)
        {
            cout << ch;
            if (ch == '+')
                ch = '|';
            s.push_back(ch);
        }
        else if (ver == 4);
        else
            ver = 0;
    }

    s = preproc(s);

    s = postfix(s);

    ests = reg_afn(s, afd_table);

    string afd_tab[100][3];
    int afd_est = 0;
    afd_est = afn_afd(afd_table, ests, afd_tab);


    return 0;
}
